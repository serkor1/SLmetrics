{
  "hash": "dbe5503fd501041330f4d3e9924b156a",
  "result": {
    "engine": "knitr",
    "markdown": "---\nformat:\n    gfm:\n        default-image-extension: \".png\"\nalways_allow_html: true\nexecute:\n  cache: true\n  freeze: auto\n  dir: meta\nknitr:\n  opts_chunk:\n    collapse: true\n    comment: \"#>\"\n    dpi: 1280\n    fig.height: 6\n    out.width: 100%\n---\n\n\n\n> Version 0.3-3 is considered pre-release of {SLmetrics}. We do not\n> expect any breaking changes, unless a major bug/issue is reported and its nature\n> forces breaking changes.\n\n\n# Version 0.3-3\n\n## :rocket: Improvements\n\n* **S3 signatures:** All S3-methods now have a generic signature, the functions should now be easier to navigate in  argument-wise.\n\n* **Exported Data:** Three new datasets have been introduced to the package; the [Wine Quality](https://archive.ics.uci.edu/dataset/186/wine+quality)-, [Obesity](https://archive.ics.uci.edu/dataset/544/estimation+of+obesity+levels+based+on+eating+habits+and+physical+condition)- and [Banknote Authentication](https://archive.ics.uci.edu/dataset/267/banknote+authentication) datasets. Each dataset is comes in named `list` where features and targets are stored separately. Below is an example from the Obesity dataset:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 1) summarise list\nsummary(SLmetrics::obesity)\n#>          Length Class      Mode\n#> features 15     data.frame list\n#> target    2     -none-     list\n\n# 2) head the features\nhead(SLmetrics::obesity$features)\n#>        caec       calc                mtrans family_history_with_overweight\n#> 1 sometimes         no public_transportation                              1\n#> 2 sometimes  sometimes public_transportation                              1\n#> 3 sometimes frequently public_transportation                              1\n#> 4 sometimes frequently               walking                              0\n#> 5 sometimes  sometimes public_transportation                              0\n#> 6 sometimes  sometimes            automobile                              0\n#>   favc smoke scc male age height fcvc ncp ch2o faf tue\n#> 1    0     0   0    0  21   1.62    2   3    2   0   1\n#> 2    0     1   1    0  21   1.52    3   3    3   3   0\n#> 3    0     0   0    1  23   1.80    2   3    2   2   1\n#> 4    0     0   0    1  27   1.80    3   3    2   2   0\n#> 5    0     0   0    1  22   1.78    2   1    2   0   0\n#> 6    1     0   0    1  29   1.62    2   3    2   0   0\n\n# 3) head the targets\nhead(SLmetrics::obesity$target$class)\n#> [1] Normal_Weight       Normal_Weight       Normal_Weight      \n#> [4] Overweight_Level_I  Overweight_Level_II Normal_Weight      \n#> 7 Levels: Insufficient_Weight Normal_Weight Obesity_Type_I ... Overweight_Level_II\nhead(SLmetrics::obesity$target$regression)\n#> [1] 64.0 56.0 77.0 87.0 89.8 53.0\n```\n:::\n\n\n## :fire: New features\n\n### :rocket: New metrics\n\n* **Poisson LogLoss:** The logloss for count data has been implemented. This metric shares the method of logloss and can be used as follows:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create factors and response probabilities\nactual   <- as.integer(factor(c(\"Class A\", \"Class B\", \"Class A\")))\nweights  <- c(0.3,0.9,1) \nresponse <- matrix(cbind(\n    0.2, 0.8,\n    0.8, 0.2,\n    0.7, 0.3\n),nrow = 3, ncol = 2)\n\ncat(\n    \"Unweighted Poisson Log Loss:\",\n    SLmetrics::logloss(\n        actual,\n        response\n    ),\n    \"Weighted Poisson Log Loss:\",\n    SLmetrics::weighted.logloss(\n        actual   = actual,\n        response = response,\n        w        = weights\n    ),\n    sep = \"\\n\"\n)\n#> Unweighted Poisson Log Loss:\n#> 1.590672\n#> Weighted Poisson Log Loss:\n#> 1.505212\n```\n:::\n\n\n* **Area under the Curve:** A new set of functions have been introduced which calculates the weighted and unweighted area under the Precision-Recall and Receiver Operator Characteristics curve. See below:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create factors and response probabilities\nactual   <- factor(c(\"Class A\", \"Class B\", \"Class A\"))\nweights  <- c(0.3,0.9,1) \nresponse <- matrix(cbind(\n    0.2, 0.8,\n    0.8, 0.2,\n    0.7, 0.3\n),nrow = 3, ncol = 2)\n\n# calculate area under the \n# precision-recall curve\nSLmetrics::pr.auc(\n    actual = actual,\n    response = response\n)\n#>   Class A   Class B \n#> 0.4166667 1.0000000\n```\n:::\n\n\n### :hammer: Metric tools\n\nA new family of `Tools`-functions are introduced with this update. This addition introduces unexported functions for constructing fast and memory efficient proprietary metrics. These functions are rewritten built-in functions from {stats} and family.\n\n* **Covariance Matrix:** A re-written `stats::cov.wt()`, using `Rcpp`. Example usage:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## generate values\nactual    <- c(1.2,  0.3, 0.56, 0.11, 1.01)\npredicted <- c(0.9, 0.22, 0.76, 0.21, 1.1) \n\n## generate covariance matrix\nSLmetrics:::cov.wt(\n    cbind(\n        actual,\n        predicted\n    )\n)\n#> $cov\n#>             actual predicted\n#> actual    0.213330  0.169215\n#> predicted 0.169215  0.163720\n#> \n#> $center\n#>    actual predicted \n#>     0.636     0.638 \n#> \n#> $n.obs\n#> [1] 5\n```\n:::\n\n\n* **Area under the curve (AUC):** The function calculates the area under the plot for bivariate curves for ordered and unordered `x` and `y` pairs. The function assumes that values are ordered and calculates the AUC directly - to control this behaviour use the `ordered`-argument in the function. Below is an example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## 0) seed\nset.seed(1903)\n\n## 1) Ordered x and y pair\nx <- seq(0, pi, length.out = 200)\ny <- sin(x)\n\n## 1.1) calculate area\nordered_auc <- SLmetrics::auc(y = y,  x = x)\n\n## 2) Unordered x and y pair\nx <- sample(seq(0, pi, length.out = 200))\ny <- sin(x)\n\n## 2.1) calculate area\nunordered_auc <- SLmetrics::auc(y = y,  x = x)\n\n## 2.2) calculate area with explicit\n## ordering\nunordered_auc_flag <- SLmetrics::auc(\n  y = y,\n  x = x,\n  ordered = FALSE\n)\n\n## 3) display result\ncat(\n  \"AUC (ordered x and y pair)\", ordered_auc,\n  \"AUC (unordered x and y pair)\", unordered_auc,\n  \"AUC (unordered x and y pair, with unordered flag)\", unordered_auc_flag,\n  sep = \"\\n\"\n)\n#> AUC (ordered x and y pair)\n#> 1.999958\n#> AUC (unordered x and y pair)\n#> -1.720771\n#> AUC (unordered x and y pair, with unordered flag)\n#> -1.720771\n```\n:::\n\n\n* **Sorting algorithms:** A set of sorting and ordering algorithms applicable to matrices have been implemented. The use-case is currently limited to `auc.foo`, `ROC` and `prROC` functions. The algorithms can be used as follows:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 1) generate a 4x4 matrix\n# with random values to be sorted\nset.seed(1903)\nX <- matrix(\n  data = cbind(sample(16:1)),\n  nrow = 4\n)\n\n# 2) sort matrix\n# in decreasing order\nSLmetrics::presort(X)\n#>      [,1] [,2] [,3] [,4]\n#> [1,]    3    2    6    1\n#> [2,]    4    5   10    7\n#> [3,]    9    8   15   11\n#> [4,]   13   14   16   12\n\n# 3) get indices \n# for sorted matrix\nSLmetrics::preorder(X)\n#>      [,1] [,2] [,3] [,4]\n#> [1,]    1    1    2    4\n#> [2,]    2    3    3    2\n#> [3,]    3    2    1    1\n#> [4,]    4    4    4    3\n```\n:::\n\n\n## :warning: Breaking changes\n\n* **Logloss:** The argument `pk` has been replaced by `response`.\n\n\n# Version 0.3-2\n\n## :rocket: Improvements\n\n* **Regression metrics (See PR https://github.com/serkor1/SLmetrics/pull/64):** All regression metrics have had their back-end optimized and are now 2-10 times faster than prior versions.\n* **LAPACK/BLAS Support (https://github.com/serkor1/SLmetrics/pull/65):** Added LAPACK/BLAS support for efficient matrix-operations.\n* **OpenMP:** Enabling/disabling OpenMP is now handled on the `R`-side and obeys `suppressMessages()`. See below:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## suppress OpenMP messages\nsuppressMessages(\n  SLmetrics::openmp.off()\n)\n```\n:::\n\n\n## :fire: New features\n\n* **Available threads:** The available number of threads can be retrieved using the `openmp.threads()`. See below:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## number of available\n## threads\nSLmetrics::openmp.threads()\n#> [1] 24\n```\n:::\n\n\n## :bug: Bug-fixes\n\n* **Diagnostic Odds Ratio:** The `dor()` is now returning a single `<[numeric]>`-value instead of `k` number of identical `<[numeric]>`-values.\n\n## :warning: Breaking Changes\n\n* **OpenMP Interface:** The interface to enabling/disabling OpenMP support has been reworked and has a more natural flow. The new interface is described below:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## enable OpenMP\nSLmetrics::openmp.on()\n#> OpenMP enabled!\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n## disable OpenMP\nSLmetrics::openmp.off()\n#> OpenMP disabled!\n```\n:::\n\n\nTo set the number of threads use the `openmp.threads()` as follows:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## set number of threads\nSLmetrics::openmp.threads(3)\n#> Using 3 threads.\n```\n:::\n\n\n\n\n\n# Version 0.3-1\n\n## :rocket: Improvements\n\n* **OpenMP Support (PR https://github.com/serkor1/SLmetrics/pull/40):** {SLmetrics} now supports parallelization through OpenMP. The OpenMP can be utilized as follows:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 1) probability distribution\n# generator\nrand.sum <- function(n){\n    x <- sort(runif(n-1))\n    c(x,1) - c(0,x)\n  }\n\n# 2) generate probability\n# matrix\nset.seed(1903)\npk <- t(replicate(100,rand.sum(1e3)))\n\n# 3) Enable OpenMP\nSLmetrics::setUseOpenMP(TRUE)\nsystem.time(SLmetrics::entropy(pk))\n\n# 3) Disable OpenMP\nSLmetrics::setUseOpenMP(FALSE)\nsystem.time(SLmetrics::entropy(pk))\n```\n:::\n\n\n* **Entropy with soft labels (https://github.com/serkor1/SLmetrics/issues/37):** `entropy()`, `cross.entropy()` and `relative.entropy()` have been introduced. These functions are heavily inspired by {scipy}.  The functions can be used as follows:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 1) Define actual\n# and observed probabilities\n\n# 1.1) actual probabilies\npk <- matrix(\n  cbind(1/2, 1/2),\n  ncol = 2\n)\n\n# 1.2) observed (estimated) probabilites\nqk <- matrix(\n  cbind(9/10, 1/10), \n  ncol = 2\n)\n\n# 2) calculate\n# Entropy\ncat(\n  \"Entropy\", SLmetrics::entropy(\n    pk\n  ),\n  \"Relative Entropy\", SLmetrics::relative.entropy(\n    pk,\n    qk\n  ),\n  \"Cross Entropy\", SLmetrics::cross.entropy(\n    pk,\n    qk\n  ),\n  sep = \"\\n\"\n)\n#> Entropy\n#> 0.6931472\n#> Relative Entropy\n#> 0.5108256\n#> Cross Entropy\n#> 1.203973\n```\n:::\n\n\n## :warning: Breaking changes\n\n* **logloss:** The argument `response` have ben renamed to `qk` as in the `entropy()`-family to maintain some degree of consistency.\n* **entropy.factor():** The function have been deleted and is no more. This was mainly due to avoid the documentation from being too large. The `logloss()`-function replaces it.\n\n## :bug: Bug-fixes\n\n* **Plot-method in ROC and prROC (https://github.com/serkor1/SLmetrics/issues/36):** Fixed a bug in  `plot.ROC()` and `plot.prROC()` where if `panels = FALSE` additional lines would be added to the plot.\n\n\n\n# Version 0.3-0\n\n## Improvements\n\n## New Feature\n\n* **Relative Root Mean Squared Error:** The function normalizes the Root Mean Squared Error by a factor. There is no official way of normalizing it - and in {SLmetrics} the RMSE can be normalized using three options; mean-, range- and IQR-normalization. It can be used as follows,\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 1) define values\nactual <- rnorm(1e3)\npredicted <- actual + rnorm(1e3)\n\n# 2) calculate Relative Root Mean Squared Error\ncat(\n  \"Mean Relative Root Mean Squared Error\", SLmetrics::rrmse(\n    actual        = actual,\n    predicted     = predicted,\n    normalization = 0\n  ),\n  \"Range Relative Root Mean Squared Error\", SLmetrics::rrmse(\n    actual        = actual,\n    predicted     = predicted,\n    normalization = 1\n  ),\n  \"IQR Relative Root Mean Squared Error\", SLmetrics::rrmse(\n    actual        = actual,\n    predicted     = predicted,\n    normalization = 2\n  ),\n  sep = \"\\n\"\n)\n#> Mean Relative Root Mean Squared Error\n#> 15.48538\n#> Range Relative Root Mean Squared Error\n#> 0.1411795\n#> IQR Relative Root Mean Squared Error\n#> 0.6884482\n```\n:::\n\n\n* **Log Loss:** Weighted and unweighted Log Loss, with and without normalization. The function can be used as follows,\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create factors and response probabilities\nactual   <- factor(c(\"Class A\", \"Class B\", \"Class A\"))\nweights  <- c(0.3,0.9,1) \nresponse <- matrix(cbind(\n    0.2, 0.8,\n    0.8, 0.2,\n    0.7, 0.3\n),nrow = 3, ncol = 2)\n\ncat(\n    \"Unweighted Log Loss:\",\n    SLmetrics::logloss(\n        actual,\n        response\n    ),\n    \"Weighted log Loss:\",\n    SLmetrics::weighted.logloss(\n        actual   = actual,\n        response = response,\n        w        = weights\n    ),\n    sep = \"\\n\"\n)\n#> Unweighted Log Loss:\n#> 0.7297521\n#> Weighted log Loss:\n#> 0.4668102\n```\n:::\n\n\n* **Weighted Receiver Operator Characteristics:** `weighted.ROC()`, the function calculates the weighted True Positive and False Positive Rates for each threshold.\n\n* **Weighted Precision-Recall Curve:** `weighted.prROC()`, the function calculates the weighted Recall and Precision for each threshold.\n\n## Breaking Changes\n\n* **Weighted Confusion Matrix:** The `w`-argument in `cmatrix()` has been removed in favor of the more verbose weighted confusion matrix call `weighted.cmatrix()`-function. See below,\n\nPrior to version `0.3-0` the weighted confusion matrix were a part of the `cmatrix()`-function and were called as follows,\n\n\n::: {.cell}\n\n```{.r .cell-code}\nSLmetrics::cmatrix(\n    actual    = actual,\n    predicted = predicted,\n    w         = weights\n)\n```\n:::\n\n\nThis solution, although simple, were inconsistent with the remaining implementation of weighted metrics in {SLmetrics}. To regain consistency and simplicity the weighted confusion matrix are now retrieved as follows,\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 1) define factors\nactual    <- factor(sample(letters[1:3], 100, replace = TRUE))\npredicted <- factor(sample(letters[1:3], 100, replace = TRUE))\nweights   <- runif(length(actual))\n\n# 2) without weights\nSLmetrics::cmatrix(\n    actual    = actual,\n    predicted = predicted\n)\n#>    a  b  c\n#> a  8  9 18\n#> b  6 13 14\n#> c 13 15  4\n\n# 2) with weights\nSLmetrics::weighted.cmatrix(\n    actual    = actual,\n    predicted = predicted,\n    w         = weights\n)\n#>          a        b        c\n#> a 4.775797 5.142631 8.579314\n#> b 3.432184 5.334526 5.941353\n#> c 6.416993 6.896212 1.105382\n```\n:::\n\n\n## :bug: Bug-fixes\n\n* **Return named vectors:** The classification metrics when `micro == NULL` were not returning named vectors. This has been fixed. \n\n\n\n# Version 0.2-0\n\n## Improvements\n\n* **documentation:** The documentation has gotten some extra love, and now all functions have their formulas embedded, the details section have been freed from a general description of [factor] creation. This will make room for future expansions on the various functions where more details are required.\n\n* **weighted classification metrics:** The `cmatrix()`-function now accepts the argument `w` which is the sample weights; if passed the respective method will return the weighted metric. Below is an example using sample weights for the confusion matrix,\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 1) define factors\nactual    <- factor(sample(letters[1:3], 100, replace = TRUE))\npredicted <- factor(sample(letters[1:3], 100, replace = TRUE))\nweights   <- runif(length(actual))\n\n# 2) without weights\nSLmetrics::cmatrix(\n    actual    = actual,\n    predicted = predicted\n)\n#>    a  b  c\n#> a 14 10  5\n#> b 12 18 11\n#> c 10  9 11\n\n# 2) with weights\nSLmetrics::weighted.cmatrix(\n    actual    = actual,\n    predicted = predicted,\n    w         = weights\n)\n#>           a         b         c\n#> a  5.974709  4.217282  3.248303\n#> b  6.965907 10.939504  5.335119\n#> c  3.301276  4.182665  5.470261\n```\n:::\n\n\nCalculating weighted metrics manually or by using `foo.cmatrix()`-method,\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 1) weigthed confusion matrix\n# and weighted accuray\nconfusion_matrix <- SLmetrics::cmatrix(\n    actual    = actual,\n    predicted = predicted,\n    w         = weights\n)\n\n# 2) pass into accuracy\n# function\nSLmetrics::accuracy(\n    confusion_matrix\n)\n#> [1] 0.43\n\n# 3) calculate the weighted\n# accuracy manually\nSLmetrics::weighted.accuracy(\n    actual    = actual,\n    predicted = predicted,\n    w         = weights\n)\n#> [1] 0.4509814\n```\n:::\n\n\nPlease note, however, that it is not possible to pass `cmatrix()`-into `weighted.accuracy()`,\n\n* **Unit-testing:** All functions are now being tested for edge-cases in balanced and imbalanced classification problems, and regression problems, individually. This will enable a more robust development process and prevent avoidable bugs.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntry(\n    SLmetrics::weighted.accuracy(\n        confusion_matrix\n    )\n)\n#> Error in UseMethod(generic = \"weighted.accuracy\", object = ..1) : \n#>   no applicable method for 'weighted.accuracy' applied to an object of class \"cmatrix\"\n```\n:::\n\n\n## :bug: Bug-fixes\n\n* **Floating precision:** Metrics would give different results based on the method used. This means that `foo.cmatrix()` and `foo.factor()` would produce different results (See Issue https://github.com/serkor1/SLmetrics/issues/16). This has been fixed by using higher precision `Rcpp::NumericMatrix` instead of `Rcpp::IntegerMatrix`.\n\n* **Miscalculation of Confusion Matrix elements:** An error in how `FN`, `TN`, `FP` and `TP` were calculated have been fixed. No issue has been raised for this bug. This was not something that was caught by the unit-tests, as the total samples were too high to spot this error. It has, however, been fixed now. This means that all metrics that uses these explicitly are now stable, and produces the desired output.\n\n* **Calculation Error in Fowlks Mallows Index:** A bug in the calculation of the `fmi()`-function has been fixed. The `fmi()`-function now correctly calculates the measure.\n\n* **Calculation Error in Pinball Deviance and Concordance Correlation Coefficient:** See issue https://github.com/serkor1/SLmetrics/issues/19. Switched to unbiased variance calculation in `ccc()`-function. The `pinball()`-function were missing a weighted quantile function. The issue is now fixed.\n\n* **Calculation Error in Balanced Accuracy:** See issue https://github.com/serkor1/SLmetrics/issues/24. The function now correctly adjusts for random chance, and the result matches that of {scikit-learn}\n\n* **Calculation Error in F-beta Score:** See issue https://github.com/serkor1/SLmetrics/issues/23. The function werent respecting `na.rm` and `micro`, this has been fixed accordingly.\n\n* **Calculation Error in Relative Absolute Error:** The function was incorrectly calculating means, instead of sums. This has been fixed.\n\n## Breaking changes\n\n* All regression metrics have had `na.rm`- and `w`-arguments removed. All  weighted regression metrics have a separate function on the `weighted.foo()` to increase consistency across all metrics. See example below,\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 1) define regression problem\nactual    <- rnorm(n = 1e3)\npredicted <- actual + rnorm(n = 1e3)\nw         <- runif(n = 1e3)\n\n# 2) unweighted metrics\nSLmetrics::rmse(actual, predicted)\n#> [1] 1.011238\n\n# 3) weighted metrics\nSLmetrics::weighted.rmse(actual, predicted, w = w)\n#> [1] 0.9842923\n```\n:::\n\n\n* The `rrmse()`-function have been removed in favor of the `rrse()`-function. This function was incorrectly specified and described in the package.\n\n\n# Version 0.1-1\n\n## General\n\n* **Backend changes:** All pair-wise metrics are moved from {Rcpp} to C++, this have reduced execution time by half. All pair-wise metrics are now faster.\n\n## Improvements\n\n* **NA-controls:** All pair-wise metrics that doesn't have a `micro`-argument were handling missing values as according to C++ and {Rcpp} internals. See [Issue](https://github.com/serkor1/SLmetrics/issues/8). Thank you @EmilHvitfeldt for pointing this out. This has now been fixed so functions uses an `na.rm`-argument to explicitly control for this. See below,\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 1) define factors\nactual    <- factor(c(\"no\", \"yes\"))\npredicted <- factor(c(NA, \"no\"))\n\n# 2) accuracy with na.rm = TRUE\nSLmetrics::accuracy(\n    actual    = actual,\n    predicted = predicted,\n    na.rm     = TRUE\n)\n\n# 2) accuracy with na.rm = FALSE\nSLmetrics::accuracy(\n    actual    = actual,\n    predicted = predicted,\n    na.rm     = FALSE\n)\n```\n:::\n\n\n## :bug: Bug-fixes\n\n* The `plot.prROC()`- and `plot.ROC()`-functions now adds a line to the plot when `panels = FALSE`. See Issue https://github.com/serkor1/SLmetrics/issues/9.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 1) define actual\n# classes\nactual <- factor(\n  sample(letters[1:2], size = 100, replace = TRUE)\n)\n\n# 2) define response\n# probabilities\nresponse <- runif(100)\n\n# 3) calculate\n# ROC and prROC\n\n# 3.1) ROC\nroc <- SLmetrics::ROC(\n    actual,\n    response\n)\n\n# 3.2) prROC\nprroc <- SLmetrics::prROC(\n    actual,\n    response\n)\n\n# 4) plot with panels\n# FALSE\npar(mfrow = c(1,2))\nplot(\n  roc,\n  panels = FALSE\n)\n\nplot(\n    prroc,\n    panels = FALSE\n)\n```\n:::\n\n\n\n# Version 0.1-0\n\n## General\n\n* {SLmetrics} is a collection of Machine Learning performance evaluation functions for supervised learning. Visit the online documentation on [GitHub Pages](https://serkor1.github.io/SLmetrics/).\n\n## Examples\n\n### Supervised classification metrics\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 1) actual classes\nprint(\n    actual <- factor(\n        sample(letters[1:3], size = 10, replace = TRUE)\n    )\n)\n#>  [1] a b a c a c b b c b\n#> Levels: a b c\n\n# 2) predicted classes\nprint(\n    predicted <- factor(\n        sample(letters[1:3], size = 10, replace = TRUE)\n    )\n)\n#>  [1] b a a c c a b a c c\n#> Levels: a b c\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# 1) calculate confusion\n# matrix and summarise\n# it\nsummary(\n    confusion_matrix <- SLmetrics::cmatrix(\n        actual    = actual,\n        predicted = predicted\n    )\n)\n#> Confusion Matrix (3 x 3) \n#> ================================================================================\n#>   a b c\n#> a 1 1 1\n#> b 2 1 1\n#> c 1 0 2\n#> ================================================================================\n#> Overall Statistics (micro average)\n#>  - Accuracy:          0.40\n#>  - Balanced Accuracy: 0.42\n#>  - Sensitivity:       0.40\n#>  - Specificity:       0.70\n#>  - Precision:         0.40\n\n# 2) calculate false positive\n# rate using micro average\nSLmetrics::fpr(\n    confusion_matrix\n)\n#>         a         b         c \n#> 0.4285714 0.1666667 0.2857143\n```\n:::\n\n\n\n### Supervised regression metrics\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 1) actual values\nactual <- rnorm(n = 100)\n\n# 2) predicted values\npredicted <- actual + rnorm(n = 100)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# 1) calculate\n# huber loss\nSLmetrics::huberloss(\n    actual    = actual,\n    predicted = predicted\n)\n#> [1] 0.4864967\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}