// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// accuracy
double accuracy(const NumericVector& actual, const NumericVector& predicted);
RcppExport SEXP _SLmetrics_accuracy(SEXP actualSEXP, SEXP predictedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type predicted(predictedSEXP);
    rcpp_result_gen = Rcpp::wrap(accuracy(actual, predicted));
    return rcpp_result_gen;
END_RCPP
}
// accuracy_cmatrix
double accuracy_cmatrix(const IntegerMatrix& x);
RcppExport SEXP _SLmetrics_accuracy_cmatrix(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(accuracy_cmatrix(x));
    return rcpp_result_gen;
END_RCPP
}
// baccuracy
double baccuracy(const Rcpp::IntegerVector& actual, const Rcpp::IntegerVector& predicted, const bool adjust);
RcppExport SEXP _SLmetrics_baccuracy(SEXP actualSEXP, SEXP predictedSEXP, SEXP adjustSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< const bool >::type adjust(adjustSEXP);
    rcpp_result_gen = Rcpp::wrap(baccuracy(actual, predicted, adjust));
    return rcpp_result_gen;
END_RCPP
}
// baccuracy_cmatrix
double baccuracy_cmatrix(const IntegerMatrix& x, const bool adjust);
RcppExport SEXP _SLmetrics_baccuracy_cmatrix(SEXP xSEXP, SEXP adjustSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type adjust(adjustSEXP);
    rcpp_result_gen = Rcpp::wrap(baccuracy_cmatrix(x, adjust));
    return rcpp_result_gen;
END_RCPP
}
// ckappa
double ckappa(const IntegerVector& actual, const IntegerVector& predicted, const double& beta);
RcppExport SEXP _SLmetrics_ckappa(SEXP actualSEXP, SEXP predictedSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< const double& >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(ckappa(actual, predicted, beta));
    return rcpp_result_gen;
END_RCPP
}
// ckappa_cmatrix
double ckappa_cmatrix(const IntegerMatrix& x, const double& beta);
RcppExport SEXP _SLmetrics_ckappa_cmatrix(SEXP xSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double& >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(ckappa_cmatrix(x, beta));
    return rcpp_result_gen;
END_RCPP
}
// cmatrix
Rcpp::NumericMatrix cmatrix(const Rcpp::IntegerVector& actual, const Rcpp::IntegerVector& predicted);
RcppExport SEXP _SLmetrics_cmatrix(SEXP actualSEXP, SEXP predictedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type predicted(predictedSEXP);
    rcpp_result_gen = Rcpp::wrap(cmatrix(actual, predicted));
    return rcpp_result_gen;
END_RCPP
}
// dor
Rcpp::NumericVector dor(const IntegerVector& actual, const IntegerVector& predicted, Nullable<bool> micro, const bool& na_rm);
RcppExport SEXP _SLmetrics_dor(SEXP actualSEXP, SEXP predictedSEXP, SEXP microSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< Nullable<bool> >::type micro(microSEXP);
    Rcpp::traits::input_parameter< const bool& >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(dor(actual, predicted, micro, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// dor_cmatrix
Rcpp::NumericVector dor_cmatrix(const Rcpp::IntegerMatrix& x, Nullable<bool> micro, const bool& na_rm);
RcppExport SEXP _SLmetrics_dor_cmatrix(SEXP xSEXP, SEXP microSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< Nullable<bool> >::type micro(microSEXP);
    Rcpp::traits::input_parameter< const bool& >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(dor_cmatrix(x, micro, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// fbeta
NumericVector fbeta(const IntegerVector& actual, const IntegerVector& predicted, const double& beta, Nullable<bool> micro, const bool& na_rm);
RcppExport SEXP _SLmetrics_fbeta(SEXP actualSEXP, SEXP predictedSEXP, SEXP betaSEXP, SEXP microSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< const double& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< Nullable<bool> >::type micro(microSEXP);
    Rcpp::traits::input_parameter< const bool& >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(fbeta(actual, predicted, beta, micro, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// fbeta_cmatrix
NumericVector fbeta_cmatrix(const IntegerMatrix& x, const double& beta, Nullable<bool> micro, const bool& na_rm);
RcppExport SEXP _SLmetrics_fbeta_cmatrix(SEXP xSEXP, SEXP betaSEXP, SEXP microSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< Nullable<bool> >::type micro(microSEXP);
    Rcpp::traits::input_parameter< const bool& >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(fbeta_cmatrix(x, beta, micro, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// fdr
NumericVector fdr(const IntegerVector& actual, const IntegerVector& predicted, Nullable<bool> micro, const bool& na_rm);
RcppExport SEXP _SLmetrics_fdr(SEXP actualSEXP, SEXP predictedSEXP, SEXP microSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< Nullable<bool> >::type micro(microSEXP);
    Rcpp::traits::input_parameter< const bool& >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(fdr(actual, predicted, micro, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// fdr_cmatrix
NumericVector fdr_cmatrix(const IntegerMatrix& x, Nullable<bool> micro, const bool& na_rm);
RcppExport SEXP _SLmetrics_fdr_cmatrix(SEXP xSEXP, SEXP microSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< Nullable<bool> >::type micro(microSEXP);
    Rcpp::traits::input_parameter< const bool& >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(fdr_cmatrix(x, micro, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// fer
NumericVector fer(const IntegerVector& actual, const IntegerVector& predicted, Nullable<bool> micro, const bool& na_rm);
RcppExport SEXP _SLmetrics_fer(SEXP actualSEXP, SEXP predictedSEXP, SEXP microSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< Nullable<bool> >::type micro(microSEXP);
    Rcpp::traits::input_parameter< const bool& >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(fer(actual, predicted, micro, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// fer_cmatrix
NumericVector fer_cmatrix(const IntegerMatrix& x, Nullable<bool> micro, const bool& na_rm);
RcppExport SEXP _SLmetrics_fer_cmatrix(SEXP xSEXP, SEXP microSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< Nullable<bool> >::type micro(microSEXP);
    Rcpp::traits::input_parameter< const bool& >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(fer_cmatrix(x, micro, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// fpr
NumericVector fpr(const IntegerVector& actual, const IntegerVector& predicted, Nullable<bool> micro, const bool& na_rm);
RcppExport SEXP _SLmetrics_fpr(SEXP actualSEXP, SEXP predictedSEXP, SEXP microSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< Nullable<bool> >::type micro(microSEXP);
    Rcpp::traits::input_parameter< const bool& >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(fpr(actual, predicted, micro, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// fpr_cmatrix
NumericVector fpr_cmatrix(const IntegerMatrix& x, Nullable<bool> micro, const bool& na_rm);
RcppExport SEXP _SLmetrics_fpr_cmatrix(SEXP xSEXP, SEXP microSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< Nullable<bool> >::type micro(microSEXP);
    Rcpp::traits::input_parameter< const bool& >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(fpr_cmatrix(x, micro, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// fallout
NumericVector fallout(const IntegerVector& actual, const IntegerVector& predicted, Nullable<bool> micro, const bool& na_rm);
RcppExport SEXP _SLmetrics_fallout(SEXP actualSEXP, SEXP predictedSEXP, SEXP microSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< Nullable<bool> >::type micro(microSEXP);
    Rcpp::traits::input_parameter< const bool& >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(fallout(actual, predicted, micro, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// fallout_cmatrix
NumericVector fallout_cmatrix(const IntegerMatrix& x, Nullable<bool> micro, const bool& na_rm);
RcppExport SEXP _SLmetrics_fallout_cmatrix(SEXP xSEXP, SEXP microSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< Nullable<bool> >::type micro(microSEXP);
    Rcpp::traits::input_parameter< const bool& >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(fallout_cmatrix(x, micro, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// fmi
double fmi(const Rcpp::IntegerVector& actual, const Rcpp::IntegerVector& predicted);
RcppExport SEXP _SLmetrics_fmi(SEXP actualSEXP, SEXP predictedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type predicted(predictedSEXP);
    rcpp_result_gen = Rcpp::wrap(fmi(actual, predicted));
    return rcpp_result_gen;
END_RCPP
}
// fmi_cmatrix
double fmi_cmatrix(const IntegerMatrix& x);
RcppExport SEXP _SLmetrics_fmi_cmatrix(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(fmi_cmatrix(x));
    return rcpp_result_gen;
END_RCPP
}
// jaccard
Rcpp::NumericVector jaccard(const IntegerVector& actual, const IntegerVector& predicted, Nullable<bool> micro, const bool& na_rm);
RcppExport SEXP _SLmetrics_jaccard(SEXP actualSEXP, SEXP predictedSEXP, SEXP microSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< Nullable<bool> >::type micro(microSEXP);
    Rcpp::traits::input_parameter< const bool& >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(jaccard(actual, predicted, micro, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// jaccard_cmatrix
Rcpp::NumericVector jaccard_cmatrix(const Rcpp::IntegerMatrix& x, Nullable<bool> micro, const bool& na_rm);
RcppExport SEXP _SLmetrics_jaccard_cmatrix(SEXP xSEXP, SEXP microSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< Nullable<bool> >::type micro(microSEXP);
    Rcpp::traits::input_parameter< const bool& >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(jaccard_cmatrix(x, micro, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// csi
Rcpp::NumericVector csi(const IntegerVector& actual, const IntegerVector& predicted, Nullable<bool> micro, const bool& na_rm);
RcppExport SEXP _SLmetrics_csi(SEXP actualSEXP, SEXP predictedSEXP, SEXP microSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< Nullable<bool> >::type micro(microSEXP);
    Rcpp::traits::input_parameter< const bool& >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(csi(actual, predicted, micro, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// csi_cmatrix
Rcpp::NumericVector csi_cmatrix(const Rcpp::IntegerMatrix& x, Nullable<bool> micro, const bool& na_rm);
RcppExport SEXP _SLmetrics_csi_cmatrix(SEXP xSEXP, SEXP microSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< Nullable<bool> >::type micro(microSEXP);
    Rcpp::traits::input_parameter< const bool& >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(csi_cmatrix(x, micro, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// tscore
Rcpp::NumericVector tscore(const IntegerVector& actual, const IntegerVector& predicted, Nullable<bool> micro, const bool& na_rm);
RcppExport SEXP _SLmetrics_tscore(SEXP actualSEXP, SEXP predictedSEXP, SEXP microSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< Nullable<bool> >::type micro(microSEXP);
    Rcpp::traits::input_parameter< const bool& >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(tscore(actual, predicted, micro, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// tscore_cmatrix
Rcpp::NumericVector tscore_cmatrix(const Rcpp::IntegerMatrix& x, Nullable<bool> micro, const bool& na_rm);
RcppExport SEXP _SLmetrics_tscore_cmatrix(SEXP xSEXP, SEXP microSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< Nullable<bool> >::type micro(microSEXP);
    Rcpp::traits::input_parameter< const bool& >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(tscore_cmatrix(x, micro, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// mcc
double mcc(const Rcpp::IntegerVector& actual, const Rcpp::IntegerVector& predicted);
RcppExport SEXP _SLmetrics_mcc(SEXP actualSEXP, SEXP predictedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type predicted(predictedSEXP);
    rcpp_result_gen = Rcpp::wrap(mcc(actual, predicted));
    return rcpp_result_gen;
END_RCPP
}
// mcc_cmatrix
double mcc_cmatrix(const Rcpp::IntegerMatrix& x);
RcppExport SEXP _SLmetrics_mcc_cmatrix(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerMatrix& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(mcc_cmatrix(x));
    return rcpp_result_gen;
END_RCPP
}
// phi
double phi(const Rcpp::IntegerVector& actual, const Rcpp::IntegerVector& predicted);
RcppExport SEXP _SLmetrics_phi(SEXP actualSEXP, SEXP predictedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type predicted(predictedSEXP);
    rcpp_result_gen = Rcpp::wrap(phi(actual, predicted));
    return rcpp_result_gen;
END_RCPP
}
// phi_cmatrix
double phi_cmatrix(const Rcpp::IntegerMatrix& x);
RcppExport SEXP _SLmetrics_phi_cmatrix(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerMatrix& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(phi_cmatrix(x));
    return rcpp_result_gen;
END_RCPP
}
// nlr
NumericVector nlr(const IntegerVector& actual, const IntegerVector& predicted, Nullable<bool> micro, const bool& na_rm);
RcppExport SEXP _SLmetrics_nlr(SEXP actualSEXP, SEXP predictedSEXP, SEXP microSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< Nullable<bool> >::type micro(microSEXP);
    Rcpp::traits::input_parameter< const bool& >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(nlr(actual, predicted, micro, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// nlr_cmatrix
Rcpp::NumericVector nlr_cmatrix(const Rcpp::IntegerMatrix& x, Nullable<bool> micro, const bool& na_rm);
RcppExport SEXP _SLmetrics_nlr_cmatrix(SEXP xSEXP, SEXP microSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< Nullable<bool> >::type micro(microSEXP);
    Rcpp::traits::input_parameter< const bool& >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(nlr_cmatrix(x, micro, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// npv
NumericVector npv(const IntegerVector& actual, const IntegerVector& predicted, Nullable<bool> micro, const bool& na_rm);
RcppExport SEXP _SLmetrics_npv(SEXP actualSEXP, SEXP predictedSEXP, SEXP microSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< Nullable<bool> >::type micro(microSEXP);
    Rcpp::traits::input_parameter< const bool& >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(npv(actual, predicted, micro, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// npv_cmatrix
NumericVector npv_cmatrix(const IntegerMatrix& x, Nullable<bool> micro, const bool& na_rm);
RcppExport SEXP _SLmetrics_npv_cmatrix(SEXP xSEXP, SEXP microSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< Nullable<bool> >::type micro(microSEXP);
    Rcpp::traits::input_parameter< const bool& >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(npv_cmatrix(x, micro, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// plr
Rcpp::NumericVector plr(const IntegerVector& actual, const IntegerVector& predicted, Nullable<bool> micro, const bool& na_rm);
RcppExport SEXP _SLmetrics_plr(SEXP actualSEXP, SEXP predictedSEXP, SEXP microSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< Nullable<bool> >::type micro(microSEXP);
    Rcpp::traits::input_parameter< const bool& >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(plr(actual, predicted, micro, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// plr_cmatrix
Rcpp::NumericVector plr_cmatrix(const Rcpp::IntegerMatrix& x, Nullable<bool> micro, const bool& na_rm);
RcppExport SEXP _SLmetrics_plr_cmatrix(SEXP xSEXP, SEXP microSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< Nullable<bool> >::type micro(microSEXP);
    Rcpp::traits::input_parameter< const bool& >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(plr_cmatrix(x, micro, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// precision
Rcpp::NumericVector precision(const IntegerVector& actual, const IntegerVector& predicted, Nullable<bool> micro, const bool& na_rm);
RcppExport SEXP _SLmetrics_precision(SEXP actualSEXP, SEXP predictedSEXP, SEXP microSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< Nullable<bool> >::type micro(microSEXP);
    Rcpp::traits::input_parameter< const bool& >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(precision(actual, predicted, micro, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// precision_cmatrix
Rcpp::NumericVector precision_cmatrix(const IntegerMatrix& x, Nullable<bool> micro, const bool& na_rm);
RcppExport SEXP _SLmetrics_precision_cmatrix(SEXP xSEXP, SEXP microSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< Nullable<bool> >::type micro(microSEXP);
    Rcpp::traits::input_parameter< const bool& >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(precision_cmatrix(x, micro, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// ppv
Rcpp::NumericVector ppv(const IntegerVector& actual, const IntegerVector& predicted, Nullable<bool> micro, const bool& na_rm);
RcppExport SEXP _SLmetrics_ppv(SEXP actualSEXP, SEXP predictedSEXP, SEXP microSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< Nullable<bool> >::type micro(microSEXP);
    Rcpp::traits::input_parameter< const bool& >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(ppv(actual, predicted, micro, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// ppv_cmatrix
Rcpp::NumericVector ppv_cmatrix(const IntegerMatrix& x, Nullable<bool> micro, const bool& na_rm);
RcppExport SEXP _SLmetrics_ppv_cmatrix(SEXP xSEXP, SEXP microSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< Nullable<bool> >::type micro(microSEXP);
    Rcpp::traits::input_parameter< const bool& >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(ppv_cmatrix(x, micro, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// recall
Rcpp::NumericVector recall(const IntegerVector& actual, const IntegerVector& predicted, Nullable<bool> micro, const bool& na_rm);
RcppExport SEXP _SLmetrics_recall(SEXP actualSEXP, SEXP predictedSEXP, SEXP microSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< Nullable<bool> >::type micro(microSEXP);
    Rcpp::traits::input_parameter< const bool& >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(recall(actual, predicted, micro, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// recall_cmatrix
Rcpp::NumericVector recall_cmatrix(const IntegerMatrix& x, Nullable<bool> micro, const bool& na_rm);
RcppExport SEXP _SLmetrics_recall_cmatrix(SEXP xSEXP, SEXP microSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< Nullable<bool> >::type micro(microSEXP);
    Rcpp::traits::input_parameter< const bool& >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(recall_cmatrix(x, micro, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// sensitivity
Rcpp::NumericVector sensitivity(const IntegerVector& actual, const IntegerVector& predicted, Nullable<bool> micro, const bool& na_rm);
RcppExport SEXP _SLmetrics_sensitivity(SEXP actualSEXP, SEXP predictedSEXP, SEXP microSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< Nullable<bool> >::type micro(microSEXP);
    Rcpp::traits::input_parameter< const bool& >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(sensitivity(actual, predicted, micro, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// sensitivity_cmatrix
Rcpp::NumericVector sensitivity_cmatrix(const IntegerMatrix& x, Nullable<bool> micro, const bool& na_rm);
RcppExport SEXP _SLmetrics_sensitivity_cmatrix(SEXP xSEXP, SEXP microSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< Nullable<bool> >::type micro(microSEXP);
    Rcpp::traits::input_parameter< const bool& >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(sensitivity_cmatrix(x, micro, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// tpr
Rcpp::NumericVector tpr(const IntegerVector& actual, const IntegerVector& predicted, Nullable<bool> micro, const bool& na_rm);
RcppExport SEXP _SLmetrics_tpr(SEXP actualSEXP, SEXP predictedSEXP, SEXP microSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< Nullable<bool> >::type micro(microSEXP);
    Rcpp::traits::input_parameter< const bool& >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(tpr(actual, predicted, micro, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// tpr_cmatrix
Rcpp::NumericVector tpr_cmatrix(const IntegerMatrix& x, Nullable<bool> micro, const bool& na_rm);
RcppExport SEXP _SLmetrics_tpr_cmatrix(SEXP xSEXP, SEXP microSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< Nullable<bool> >::type micro(microSEXP);
    Rcpp::traits::input_parameter< const bool& >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(tpr_cmatrix(x, micro, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// specificity
NumericVector specificity(const IntegerVector& actual, const IntegerVector& predicted, Nullable<bool> micro, const bool& na_rm);
RcppExport SEXP _SLmetrics_specificity(SEXP actualSEXP, SEXP predictedSEXP, SEXP microSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< Nullable<bool> >::type micro(microSEXP);
    Rcpp::traits::input_parameter< const bool& >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(specificity(actual, predicted, micro, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// specificity_cmatrix
Rcpp::NumericVector specificity_cmatrix(const IntegerMatrix& x, Nullable<bool> micro, const bool& na_rm);
RcppExport SEXP _SLmetrics_specificity_cmatrix(SEXP xSEXP, SEXP microSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< Nullable<bool> >::type micro(microSEXP);
    Rcpp::traits::input_parameter< const bool& >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(specificity_cmatrix(x, micro, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// tnr
NumericVector tnr(const IntegerVector& actual, const IntegerVector& predicted, Nullable<bool> micro, const bool& na_rm);
RcppExport SEXP _SLmetrics_tnr(SEXP actualSEXP, SEXP predictedSEXP, SEXP microSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< Nullable<bool> >::type micro(microSEXP);
    Rcpp::traits::input_parameter< const bool& >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(tnr(actual, predicted, micro, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// tnr_cmatrix
Rcpp::NumericVector tnr_cmatrix(const IntegerMatrix& x, Nullable<bool> micro, const bool& na_rm);
RcppExport SEXP _SLmetrics_tnr_cmatrix(SEXP xSEXP, SEXP microSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< Nullable<bool> >::type micro(microSEXP);
    Rcpp::traits::input_parameter< const bool& >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(tnr_cmatrix(x, micro, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// selectivity
NumericVector selectivity(const IntegerVector& actual, const IntegerVector& predicted, Nullable<bool> micro, const bool& na_rm);
RcppExport SEXP _SLmetrics_selectivity(SEXP actualSEXP, SEXP predictedSEXP, SEXP microSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< Nullable<bool> >::type micro(microSEXP);
    Rcpp::traits::input_parameter< const bool& >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(selectivity(actual, predicted, micro, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// selectivity_cmatrix
Rcpp::NumericVector selectivity_cmatrix(const IntegerMatrix& x, Nullable<bool> micro, const bool& na_rm);
RcppExport SEXP _SLmetrics_selectivity_cmatrix(SEXP xSEXP, SEXP microSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< Nullable<bool> >::type micro(microSEXP);
    Rcpp::traits::input_parameter< const bool& >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(selectivity_cmatrix(x, micro, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// zerooneloss
double zerooneloss(const NumericVector& actual, const NumericVector& predicted);
RcppExport SEXP _SLmetrics_zerooneloss(SEXP actualSEXP, SEXP predictedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type predicted(predictedSEXP);
    rcpp_result_gen = Rcpp::wrap(zerooneloss(actual, predicted));
    return rcpp_result_gen;
END_RCPP
}
// zerooneloss_cmatrix
double zerooneloss_cmatrix(const IntegerMatrix& x);
RcppExport SEXP _SLmetrics_zerooneloss_cmatrix(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(zerooneloss_cmatrix(x));
    return rcpp_result_gen;
END_RCPP
}
// rsq
double rsq(const NumericVector& actual, const NumericVector& predicted, const double k);
RcppExport SEXP _SLmetrics_rsq(SEXP actualSEXP, SEXP predictedSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< const double >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(rsq(actual, predicted, k));
    return rcpp_result_gen;
END_RCPP
}
// ccc
double ccc(const Rcpp::NumericVector& actual, const Rcpp::NumericVector& predicted, bool correction, Rcpp::Nullable<Rcpp::NumericVector> w);
RcppExport SEXP _SLmetrics_ccc(SEXP actualSEXP, SEXP predictedSEXP, SEXP correctionSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< bool >::type correction(correctionSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericVector> >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(ccc(actual, predicted, correction, w));
    return rcpp_result_gen;
END_RCPP
}
// huberloss
double huberloss(const Rcpp::NumericVector& actual, const Rcpp::NumericVector& predicted, const double& delta, Rcpp::Nullable<Rcpp::NumericVector> w);
RcppExport SEXP _SLmetrics_huberloss(SEXP actualSEXP, SEXP predictedSEXP, SEXP deltaSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< const double& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericVector> >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(huberloss(actual, predicted, delta, w));
    return rcpp_result_gen;
END_RCPP
}
// mae
double mae(const Rcpp::NumericVector& actual, const Rcpp::NumericVector& predicted, Rcpp::Nullable<Rcpp::NumericVector> w);
RcppExport SEXP _SLmetrics_mae(SEXP actualSEXP, SEXP predictedSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericVector> >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(mae(actual, predicted, w));
    return rcpp_result_gen;
END_RCPP
}
// mape
double mape(const Rcpp::NumericVector& actual, const Rcpp::NumericVector& predicted, Rcpp::Nullable<Rcpp::NumericVector> w);
RcppExport SEXP _SLmetrics_mape(SEXP actualSEXP, SEXP predictedSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericVector> >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(mape(actual, predicted, w));
    return rcpp_result_gen;
END_RCPP
}
// mpe
double mpe(const Rcpp::NumericVector& actual, const Rcpp::NumericVector& predicted, Rcpp::Nullable<Rcpp::NumericVector> w);
RcppExport SEXP _SLmetrics_mpe(SEXP actualSEXP, SEXP predictedSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericVector> >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(mpe(actual, predicted, w));
    return rcpp_result_gen;
END_RCPP
}
// mse
double mse(const Rcpp::NumericVector& actual, const Rcpp::NumericVector& predicted, Rcpp::Nullable<Rcpp::NumericVector> w);
RcppExport SEXP _SLmetrics_mse(SEXP actualSEXP, SEXP predictedSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericVector> >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(mse(actual, predicted, w));
    return rcpp_result_gen;
END_RCPP
}
// rmse
double rmse(const Rcpp::NumericVector& actual, const Rcpp::NumericVector& predicted, Rcpp::Nullable<Rcpp::NumericVector> w);
RcppExport SEXP _SLmetrics_rmse(SEXP actualSEXP, SEXP predictedSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericVector> >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(rmse(actual, predicted, w));
    return rcpp_result_gen;
END_RCPP
}
// rmsle
double rmsle(const Rcpp::NumericVector& actual, const Rcpp::NumericVector& predicted, Rcpp::Nullable<Rcpp::NumericVector> w);
RcppExport SEXP _SLmetrics_rmsle(SEXP actualSEXP, SEXP predictedSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericVector> >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(rmsle(actual, predicted, w));
    return rcpp_result_gen;
END_RCPP
}
// smape
double smape(const Rcpp::NumericVector& actual, const Rcpp::NumericVector& predicted, Rcpp::Nullable<Rcpp::NumericVector> w);
RcppExport SEXP _SLmetrics_smape(SEXP actualSEXP, SEXP predictedSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericVector> >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(smape(actual, predicted, w));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_SLmetrics_accuracy", (DL_FUNC) &_SLmetrics_accuracy, 2},
    {"_SLmetrics_accuracy_cmatrix", (DL_FUNC) &_SLmetrics_accuracy_cmatrix, 1},
    {"_SLmetrics_baccuracy", (DL_FUNC) &_SLmetrics_baccuracy, 3},
    {"_SLmetrics_baccuracy_cmatrix", (DL_FUNC) &_SLmetrics_baccuracy_cmatrix, 2},
    {"_SLmetrics_ckappa", (DL_FUNC) &_SLmetrics_ckappa, 3},
    {"_SLmetrics_ckappa_cmatrix", (DL_FUNC) &_SLmetrics_ckappa_cmatrix, 2},
    {"_SLmetrics_cmatrix", (DL_FUNC) &_SLmetrics_cmatrix, 2},
    {"_SLmetrics_dor", (DL_FUNC) &_SLmetrics_dor, 4},
    {"_SLmetrics_dor_cmatrix", (DL_FUNC) &_SLmetrics_dor_cmatrix, 3},
    {"_SLmetrics_fbeta", (DL_FUNC) &_SLmetrics_fbeta, 5},
    {"_SLmetrics_fbeta_cmatrix", (DL_FUNC) &_SLmetrics_fbeta_cmatrix, 4},
    {"_SLmetrics_fdr", (DL_FUNC) &_SLmetrics_fdr, 4},
    {"_SLmetrics_fdr_cmatrix", (DL_FUNC) &_SLmetrics_fdr_cmatrix, 3},
    {"_SLmetrics_fer", (DL_FUNC) &_SLmetrics_fer, 4},
    {"_SLmetrics_fer_cmatrix", (DL_FUNC) &_SLmetrics_fer_cmatrix, 3},
    {"_SLmetrics_fpr", (DL_FUNC) &_SLmetrics_fpr, 4},
    {"_SLmetrics_fpr_cmatrix", (DL_FUNC) &_SLmetrics_fpr_cmatrix, 3},
    {"_SLmetrics_fallout", (DL_FUNC) &_SLmetrics_fallout, 4},
    {"_SLmetrics_fallout_cmatrix", (DL_FUNC) &_SLmetrics_fallout_cmatrix, 3},
    {"_SLmetrics_fmi", (DL_FUNC) &_SLmetrics_fmi, 2},
    {"_SLmetrics_fmi_cmatrix", (DL_FUNC) &_SLmetrics_fmi_cmatrix, 1},
    {"_SLmetrics_jaccard", (DL_FUNC) &_SLmetrics_jaccard, 4},
    {"_SLmetrics_jaccard_cmatrix", (DL_FUNC) &_SLmetrics_jaccard_cmatrix, 3},
    {"_SLmetrics_csi", (DL_FUNC) &_SLmetrics_csi, 4},
    {"_SLmetrics_csi_cmatrix", (DL_FUNC) &_SLmetrics_csi_cmatrix, 3},
    {"_SLmetrics_tscore", (DL_FUNC) &_SLmetrics_tscore, 4},
    {"_SLmetrics_tscore_cmatrix", (DL_FUNC) &_SLmetrics_tscore_cmatrix, 3},
    {"_SLmetrics_mcc", (DL_FUNC) &_SLmetrics_mcc, 2},
    {"_SLmetrics_mcc_cmatrix", (DL_FUNC) &_SLmetrics_mcc_cmatrix, 1},
    {"_SLmetrics_phi", (DL_FUNC) &_SLmetrics_phi, 2},
    {"_SLmetrics_phi_cmatrix", (DL_FUNC) &_SLmetrics_phi_cmatrix, 1},
    {"_SLmetrics_nlr", (DL_FUNC) &_SLmetrics_nlr, 4},
    {"_SLmetrics_nlr_cmatrix", (DL_FUNC) &_SLmetrics_nlr_cmatrix, 3},
    {"_SLmetrics_npv", (DL_FUNC) &_SLmetrics_npv, 4},
    {"_SLmetrics_npv_cmatrix", (DL_FUNC) &_SLmetrics_npv_cmatrix, 3},
    {"_SLmetrics_plr", (DL_FUNC) &_SLmetrics_plr, 4},
    {"_SLmetrics_plr_cmatrix", (DL_FUNC) &_SLmetrics_plr_cmatrix, 3},
    {"_SLmetrics_precision", (DL_FUNC) &_SLmetrics_precision, 4},
    {"_SLmetrics_precision_cmatrix", (DL_FUNC) &_SLmetrics_precision_cmatrix, 3},
    {"_SLmetrics_ppv", (DL_FUNC) &_SLmetrics_ppv, 4},
    {"_SLmetrics_ppv_cmatrix", (DL_FUNC) &_SLmetrics_ppv_cmatrix, 3},
    {"_SLmetrics_recall", (DL_FUNC) &_SLmetrics_recall, 4},
    {"_SLmetrics_recall_cmatrix", (DL_FUNC) &_SLmetrics_recall_cmatrix, 3},
    {"_SLmetrics_sensitivity", (DL_FUNC) &_SLmetrics_sensitivity, 4},
    {"_SLmetrics_sensitivity_cmatrix", (DL_FUNC) &_SLmetrics_sensitivity_cmatrix, 3},
    {"_SLmetrics_tpr", (DL_FUNC) &_SLmetrics_tpr, 4},
    {"_SLmetrics_tpr_cmatrix", (DL_FUNC) &_SLmetrics_tpr_cmatrix, 3},
    {"_SLmetrics_specificity", (DL_FUNC) &_SLmetrics_specificity, 4},
    {"_SLmetrics_specificity_cmatrix", (DL_FUNC) &_SLmetrics_specificity_cmatrix, 3},
    {"_SLmetrics_tnr", (DL_FUNC) &_SLmetrics_tnr, 4},
    {"_SLmetrics_tnr_cmatrix", (DL_FUNC) &_SLmetrics_tnr_cmatrix, 3},
    {"_SLmetrics_selectivity", (DL_FUNC) &_SLmetrics_selectivity, 4},
    {"_SLmetrics_selectivity_cmatrix", (DL_FUNC) &_SLmetrics_selectivity_cmatrix, 3},
    {"_SLmetrics_zerooneloss", (DL_FUNC) &_SLmetrics_zerooneloss, 2},
    {"_SLmetrics_zerooneloss_cmatrix", (DL_FUNC) &_SLmetrics_zerooneloss_cmatrix, 1},
    {"_SLmetrics_rsq", (DL_FUNC) &_SLmetrics_rsq, 3},
    {"_SLmetrics_ccc", (DL_FUNC) &_SLmetrics_ccc, 4},
    {"_SLmetrics_huberloss", (DL_FUNC) &_SLmetrics_huberloss, 4},
    {"_SLmetrics_mae", (DL_FUNC) &_SLmetrics_mae, 3},
    {"_SLmetrics_mape", (DL_FUNC) &_SLmetrics_mape, 3},
    {"_SLmetrics_mpe", (DL_FUNC) &_SLmetrics_mpe, 3},
    {"_SLmetrics_mse", (DL_FUNC) &_SLmetrics_mse, 3},
    {"_SLmetrics_rmse", (DL_FUNC) &_SLmetrics_rmse, 3},
    {"_SLmetrics_rmsle", (DL_FUNC) &_SLmetrics_rmsle, 3},
    {"_SLmetrics_smape", (DL_FUNC) &_SLmetrics_smape, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_SLmetrics(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
