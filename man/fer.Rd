% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{fer}
\alias{fer}
\title{Compute the  \eqn{\text{false}} \eqn{\text{exclusion}} \eqn{\text{rate}}}
\usage{
# false exclusion rate
fer(
  actual,
  predicted,
  aggregate = FALSE
)
}
\arguments{
\item{actual}{A <\link{factor}>-vector of \link{length} \eqn{n}, and \eqn{k} levels.}

\item{predicted}{A <\link{factor}>-vector of \link{length} \eqn{n}, and \eqn{k} levels.}
}
\value{
If \code{aggregate} is \link{FALSE} (the default), a named <\link{numeric}>-vector of \link{length} k

If \code{aggregate} is \link{TRUE}, a <\link{numeric}>-vector of \link{length} 1
}
\description{
The \code{\link[=fer]{fer()}}-function computes the \href{https://en.wikipedia.org/wiki/Positive_and_negative_predictive_values#False_omission_rate}{false omission rate} (FOR), the proportion of false negatives among the predicted negatives, between
two vectors of predicted and observed \code{\link[=factor]{factor()}} values.

When \code{aggregate = TRUE}, the function returns the micro-average FOR across all classes \eqn{k}. By default, it returns the class-wise FOR.
}
\details{
Consider a classification problem with three classes: \code{A}, \code{B}, and \code{C}. The actual vector of \code{\link[=factor]{factor()}} values is defined as follows:

\if{html}{\out{<div class="sourceCode r">}}\preformatted{## set seed
set.seed(1903)

## actual
factor(
  x = sample(x = 1:3, size = 10, replace = TRUE),
  levels = c(1, 2, 3),
  labels = c("A", "B", "C")
)
#>  [1] B A B B A C B C C A
#> Levels: A B C
}\if{html}{\out{</div>}}

Here, the values 1, 2, and 3 are mapped to \code{A}, \code{B}, and \code{C}, respectively. Now, suppose your model does not predict any \code{B}'s. The predicted vector of \code{\link[=factor]{factor()}} values would be defined as follows:

\if{html}{\out{<div class="sourceCode r">}}\preformatted{## set seed
set.seed(1903)

## predicted
factor(
  x = sample(x = c(1, 3), size = 10, replace = TRUE),
  levels = c(1, 2, 3),
  labels = c("A", "B", "C")
)
#>  [1] C A C C C C C C A C
#> Levels: A B C
}\if{html}{\out{</div>}}

In both cases, \eqn{k = 3}, determined indirectly by the \code{levels} argument.
}
\section{Calculation}{


The metric is calculated for each class \eqn{k} as follows,

\deqn{
  \frac{\#FN_k}{\#FN_k + \#TN_k}
}

Where \eqn{\#FN_k} and \eqn{\#TN_k} are the number of false negatives and true negatives, respectively, for each class \eqn{k}.

When \code{aggregate = TRUE}, the \code{micro}-average is calculated,

\deqn{
  \frac{\sum_{k=1}^k \#FN_k}{\sum_{k=1}^k \#FN_k + \sum_{k=1}^k \#TN_k}
}
}

\examples{
# 1) recode Iris
# to binary classification
# problem
iris$Species <- factor(
  x = as.numeric(
    iris$Species == "virginica"
  ),
  levels = c(1,0),
  labels = c("virginica", "others")
)

# 2) fit the logistic
# regression
model <- glm(
  formula = Species ~ Sepal.Length + Sepal.Width,
  data    = iris,
  family = binomial(
    link = "logit"
  )
)

# 3) generate predicted
# classes
predicted <- as.factor(
  ifelse(
    predict(model, type = "response") > 0.5,
    yes = "virginica",
    no  = "others"
  )
)

# 4) evaluate performance
# 4.1) by class
fer(
  actual    = iris$Species,
  predicted = predicted
)

# 4.2) macro-average
mean(
  fer(
    actual    = iris$Species,
    predicted = predicted
  )
)

# 4.3) micro-average
fer(
  actual    = iris$Species,
  predicted = predicted,
  aggregate = TRUE
)
}
\seealso{
Other classification: 
\code{\link{accuracy.factor}()},
\code{\link{baccuracy.factor}()},
\code{\link{cmatrix}()},
\code{\link{dor.factor}()},
\code{\link{fbeta.factor}()},
\code{\link{fdr}()},
\code{\link{fmi}()},
\code{\link{fpr.factor}()},
\code{\link{jaccard.factor}()},
\code{\link{kappa}()},
\code{\link{mcc.factor}()},
\code{\link{nlr.factor}()},
\code{\link{npv}()},
\code{\link{plr.factor}()},
\code{\link{precision.factor}()},
\code{\link{recall.factor}()},
\code{\link{specificity.factor}()},
\code{\link{zerooneloss}()}
}
\concept{classification}
