% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R, R/S3_HuberLoss.R
\name{huberloss.numeric}
\alias{huberloss.numeric}
\alias{huberloss}
\title{Compute the \eqn{\text{huber}} \eqn{\text{loss}}}
\usage{
\method{huberloss}{numeric}(actual, predicted, delta = 1, w = NULL, na.rm = FALSE, ...)

huberloss(...)
}
\arguments{
\item{actual}{A <\link{numeric}>-vector of \link{length} \eqn{n}. The observed (continuous) response variable.}

\item{predicted}{A <\link{numeric}>-vector of \link{length} \eqn{n}. The estimated (continuous) response variable.}

\item{delta}{A <\link{numeric}>-vector of \link{length} 1. 1 by default. The threshold value for switch between functions (see calculation).}

\item{w}{A <\link{numeric}>-vector of \link{length} \eqn{n}. The weight assigned to each observation in the data. See \code{\link[stats:weighted.mean]{stats::weighted.mean()}} for more details.}

\item{na.rm}{A <\link{logical}>-value of \link{length} \eqn{1}. \link{FALSE} by default. If \link{TRUE} NA values will be removed from the computation.}

\item{...}{Arguments passed into other methods.}
}
\value{
A <\link{numeric}> vector of \link{length} 1.
}
\description{
The \code{\link[=huberloss]{huberloss()}}-function computes the simple and weighted \href{https://en.wikipedia.org/wiki/Huber_loss}{huber loss} between
the predicted and observed <\link{numeric}> vectors.If \code{w} is not \link{NULL} the function returns the weighted averages.
}
\section{Calculation}{


The metric is calculated as follows,

\deqn{
 \frac{1}{2} (y - \upsilon)^2 ~for~ |y - \upsilon| \leq \delta
}

and

\deqn{
  \delta |y-\upsilon|-\frac{1}{2} \delta^2 ~for~ \text{otherwise}
}

where \eqn{y} and \eqn{\upsilon} are the \code{actual} and \code{predicted} values respectively. If \code{w} is not \link{NULL}, then all values
are aggregated using the weights.
}

\examples{
# 1) fit a linear
# regression
model <- lm(
  mpg ~ .,
  data = mtcars
)

# 1.1) define actual
# and predicted values
# to measure performance
actual    <- mtcars$mpg
predicted <- fitted(model)


# 2) calculate the metric
# with delta 0.5
huberloss(
  actual = actual,
  predicted = predicted,
  delta = 0.5
)

# 3) caclulate weighted
# metric using arbitrary weights
w <- rbeta(
  n = 1e3,
  shape1 = 10,
  shape2 = 2
)

huberloss(
  actual = actual,
  predicted = predicted,
  delta = 0.5,
  w     = w
)
}
\seealso{
Other regression: 
\code{\link{ccc.numeric}()},
\code{\link{mae.numeric}()},
\code{\link{mape.numeric}()},
\code{\link{mpe.numeric}()},
\code{\link{mse.numeric}()},
\code{\link{pinball.numeric}()},
\code{\link{rae.numeric}()},
\code{\link{rmse.numeric}()},
\code{\link{rmsle.numeric}()},
\code{\link{rrmse.numeric}()},
\code{\link{rsq.numeric}()},
\code{\link{smape.numeric}()}
}
\concept{regression}
